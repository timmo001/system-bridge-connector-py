name: CI

# yamllint disable-line rule:truthy
on:
  push:
  pull_request:
    types:
      - opened
      - reopened
      - synchronize
  workflow_dispatch:

env:
  CACHE_VERSION: 1
  DEFAULT_PYTHON: 3.9
  CACHE_TEST_HOME: ~/.cache/test

jobs:
  lint-black:
    name: 👕 Run Black
    runs-on: ubuntu-latest
    steps:
      - name: ⤵️ Check out code from GitHub
        uses: actions/checkout@v2.3.4
      - name: 🏗 Set up Python ${{ env.DEFAULT_PYTHON }}
        uses: actions/setup-python@v2.2.1
        id: python
        with:
          python-version: ${{ env.DEFAULT_PYTHON }}
      - name: 🏗 Restore base Python virtual environment
        id: cache-venv
        uses: actions/cache@v2.1.4
        with:
          path: venv
          key: >-
            ${{ env.CACHE_VERSION}}-${{ runner.os }}-base-venv-${{
            steps.python.outputs.python-version }}-${{
            hashFiles('requirements.txt') }}-${{
            hashFiles('requirements_test.txt') }}
      - name: 🏗 Fail job if Python cache restore failed
        if: steps.cache-venv.outputs.cache-hit != 'true'
        run: |
          echo "Failed to restore Python virtual environment from cache"
          exit 1
      - name: 🏗 Restore test environment from cache
        id: cache-precommit
        uses: actions/cache@v2.1.4
        with:
          path: ${{ env.CACHE_TEST_HOME }}
          key: |
            ${{ env.CACHE_VERSION}}-${{ runner.os }}-test-${{ hashFiles('.test-config.yaml') }}
      - name: 🏗 Fail job if cache restore failed
        if: steps.cache-venv.outputs.cache-hit != 'true'
        run: |
          echo "Failed to restore Python virtual environment from cache"
          exit 1
      - name: 🚀 Run black
        run: |
          . venv/bin/activate
          pip install -U black
          black --check .
  lint-jsonlint:
    name: 👕 JSONLint
    runs-on: ubuntu-latest
    steps:
      - name: ⤵️ Check out code from GitHub
        uses: actions/checkout@v2.3.4
      - name: 🚀 Run JSONLint
        run: |
          sudo apt install -y jsonlint
          for file in $(find ./ -type f -name "*.json"); do
            if ! jsonlint-php -q $file; then
              export FAILED=1
            else
              echo "$file OK"
            fi
          done
          if [ "${FAILED}" = "1" ]; then
            exit 1
          fi
  lint-markdownlint:
    name: 👕 MarkdownLint
    runs-on: ubuntu-latest
    steps:
      - name: ⤵️ Check out code from GitHub
        uses: actions/checkout@v2.3.4
      - name: 🚀 Run mdl
        uses: actionshub/markdownlint@2.0.2
  lint-markdown-links:
    name: 👕 Markdown Link Check
    runs-on: ubuntu-latest
    steps:
      - name: ⤵️ Check out code from GitHub
        uses: actions/checkout@v2.3.4
      - name: 🚀 Run Markdown Links
        uses: gaurav-nelson/github-action-markdown-link-check@1.0.12
        with:
          use-quiet-mode: no
          use-verbose-mode: no
          config-file: mlc_config.json
          folder-path: .github
          file-path: ./README.md
          max-depth: -1
          check-modified-files-only: no
          base-branch: master
          file-extension: .md
  lint-prettier:
    name: 👕 Prettier
    runs-on: ubuntu-latest
    steps:
      - name: ⤵️ Check out code from GitHub
        uses: actions/checkout@v2.3.4
      - name: 🚀 Run Prettier
        uses: creyD/prettier_action@v3.3
        with:
          prettier_options: --write **/*.{js,json,ts,tsx,yml,yaml}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  lint-yamllint:
    name: 👕 YAMLLint
    runs-on: ubuntu-latest
    steps:
      - name: ⤵️ Check out code from GitHub
        uses: actions/checkout@v2.3.4
      - name: 🚀 Run YAMLLint
        uses: ibiqlik/action-yamllint@v3
        with:
          file_or_dir: .
          config_file: .yamllint.yml
          format: colored
          strict: false
  test:
    name: 🧪 Test Package
    runs-on: ubuntu-latest
    steps:
      - name: ⤵️ Check out code from GitHub
        uses: actions/checkout@v2.3.4
      - name: 🏗 Set up Python ${{ env.DEFAULT_PYTHON }}
        uses: actions/setup-python@v2.2.1
        id: python
        with:
          python-version: ${{ env.DEFAULT_PYTHON }}
      - name: 🏗 Restore base Python virtual environment
        id: cache-venv
        uses: actions/cache@v2.1.4
        with:
          path: venv
          key: >-
            ${{ env.CACHE_VERSION}}-${{ runner.os }}-base-venv-${{
            steps.python.outputs.python-version }}-${{
            hashFiles('requirements.txt') }}-${{
            hashFiles('requirements_test.txt') }}
      - name: 🏗 Fail job if Python cache restore failed
        if: steps.cache-venv.outputs.cache-hit != 'true'
        run: |
          echo "Failed to restore Python virtual environment from cache"
          exit 1
      - name: 🏗 Restore test environment from cache
        id: cache-precommit
        uses: actions/cache@v2.1.4
        with:
          path: ${{ env.CACHE_TEST_HOME }}
          key: |
            ${{ env.CACHE_VERSION}}-${{ runner.os }}-test-${{ hashFiles('.test-config.yaml') }}
      - name: 🏗 Fail job if cache restore failed
        if: steps.cache-venv.outputs.cache-hit != 'true'
        run: |
          echo "Failed to restore Python virtual environment from cache"
          exit 1
      - name: 🏗 Install Pytest Annotation plugin
        run: |
          . venv/bin/activate
          # Ideally this should be part of our dependencies
          # However this plugin is fairly new and doesn't run correctly
          # on a non-GitHub environment.
          pip install pytest-github-actions-annotate-failures
      - name: 🧪 Run pytest
        run: |
          . venv/bin/activate
          pip install -r requirements_test.txt
          pytest \
            -qq \
            --durations=10 \
            --cov systembridge \
            -o console_output_style=count \
            -p no:sugar \
            tests
      - name: ⬆ Upload coverage artifact
        uses: actions/upload-artifact@v2.2.2
        with:
          name: coverage-${{ env.DEFAULT_PYTHON }}-group${{ matrix.group }}
          path: .coverage
      - name: Check dirty
        run: |
          ./script/check_dirty
  coverage:
    name: 🏗 Process test coverage
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: ⤵️ Check out code from GitHub
        uses: actions/checkout@v2.3.4
      - name: 🏗 Set up Python ${{ env.DEFAULT_PYTHON }}
        uses: actions/setup-python@v2.2.1
        id: python
        with:
          python-version: ${{ env.DEFAULT_PYTHON }}
      - name: 🏗 Restore full Python ${{ env.DEFAULT_PYTHON }} virtual environment
        id: cache-venv
        uses: actions/cache@v2.1.4
        with:
          path: venv
          key: >-
            ${{ env.CACHE_VERSION}}-${{ runner.os }}-venv-${{
            matrix.python-version }}-${{ hashFiles('requirements_test.txt')
            }}-${{ hashFiles('requirements_all.txt') }}
      - name: 🏗 Fail job if Python cache restore failed
        if: steps.cache-venv.outputs.cache-hit != 'true'
        run: |
          echo "Failed to restore Python virtual environment from cache"
          exit 1
      - name: ⤵ Download all coverage artifacts
        uses: actions/download-artifact@v2
      - name: 🏗 Combine coverage results
        run: |
          . venv/bin/activate
          coverage combine coverage*/.coverage*
          coverage report --fail-under=94
          coverage xml
      - name: ⬆ Upload coverage to Codecov
        uses: codecov/codecov-action@v1.2.1
