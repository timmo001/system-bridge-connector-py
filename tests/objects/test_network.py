"""
Generated by generator/generator.py - 2021-02-20 17:08:49.601197
"""
from systembridge.objects.network import Network
from tests.fixtrues.network_fixtrue import network_fixtrue_response


def test_network(network_fixtrue_response):
    obj = Network(network_fixtrue_response)
    assert (
        obj.connections[0].protocol
        == network_fixtrue_response["connections"][0]["protocol"]
    )
    assert (
        obj.connections[0].localAddress
        == network_fixtrue_response["connections"][0]["localAddress"]
    )
    assert (
        obj.connections[0].localPort
        == network_fixtrue_response["connections"][0]["localPort"]
    )
    assert (
        obj.connections[0].peerAddress
        == network_fixtrue_response["connections"][0]["peerAddress"]
    )
    assert (
        obj.connections[0].peerPort
        == network_fixtrue_response["connections"][0]["peerPort"]
    )
    assert (
        obj.connections[0].state == network_fixtrue_response["connections"][0]["state"]
    )
    assert obj.connections[0].pid == network_fixtrue_response["connections"][0]["pid"]
    assert (
        obj.connections[0].process
        == network_fixtrue_response["connections"][0]["process"]
    )
    assert obj.gatewayDefault == network_fixtrue_response["gatewayDefault"]
    assert obj.interfaceDefault == network_fixtrue_response["interfaceDefault"]
    assert obj.interfaces[0].iface == network_fixtrue_response["interfaces"][0]["iface"]
    assert (
        obj.interfaces[0].ifaceName
        == network_fixtrue_response["interfaces"][0]["ifaceName"]
    )
    assert obj.interfaces[0].ip4 == network_fixtrue_response["interfaces"][0]["ip4"]
    assert (
        obj.interfaces[0].ip4subnet
        == network_fixtrue_response["interfaces"][0]["ip4subnet"]
    )
    assert obj.interfaces[0].ip6 == network_fixtrue_response["interfaces"][0]["ip6"]
    assert (
        obj.interfaces[0].ip6subnet
        == network_fixtrue_response["interfaces"][0]["ip6subnet"]
    )
    assert obj.interfaces[0].mac == network_fixtrue_response["interfaces"][0]["mac"]
    assert (
        obj.interfaces[0].internal
        == network_fixtrue_response["interfaces"][0]["internal"]
    )
    assert (
        obj.interfaces[0].virtual
        == network_fixtrue_response["interfaces"][0]["virtual"]
    )
    assert (
        obj.interfaces[0].operstate
        == network_fixtrue_response["interfaces"][0]["operstate"]
    )
    assert obj.interfaces[0].type == network_fixtrue_response["interfaces"][0]["type"]
    assert (
        obj.interfaces[0].duplex == network_fixtrue_response["interfaces"][0]["duplex"]
    )
    assert obj.interfaces[0].mtu == network_fixtrue_response["interfaces"][0]["mtu"]
    assert obj.interfaces[0].speed == network_fixtrue_response["interfaces"][0]["speed"]
    assert obj.interfaces[0].dhcp == network_fixtrue_response["interfaces"][0]["dhcp"]
    assert (
        obj.interfaces[0].dnsSuffix
        == network_fixtrue_response["interfaces"][0]["dnsSuffix"]
    )
    assert (
        obj.interfaces[0].ieee8021xAuth
        == network_fixtrue_response["interfaces"][0]["ieee8021xAuth"]
    )
    assert (
        obj.interfaces[0].ieee8021xState
        == network_fixtrue_response["interfaces"][0]["ieee8021xState"]
    )
    assert (
        obj.interfaces[0].carrierChanges
        == network_fixtrue_response["interfaces"][0]["carrierChanges"]
    )
    assert obj.stats[0].iface == network_fixtrue_response["stats"][0]["iface"]
    assert obj.stats[0].operstate == network_fixtrue_response["stats"][0]["operstate"]
    assert obj.stats[0].rx_bytes == network_fixtrue_response["stats"][0]["rx_bytes"]
    assert obj.stats[0].rx_dropped == network_fixtrue_response["stats"][0]["rx_dropped"]
    assert obj.stats[0].rx_errors == network_fixtrue_response["stats"][0]["rx_errors"]
    assert obj.stats[0].tx_bytes == network_fixtrue_response["stats"][0]["tx_bytes"]
    assert obj.stats[0].tx_dropped == network_fixtrue_response["stats"][0]["tx_dropped"]
    assert obj.stats[0].tx_errors == network_fixtrue_response["stats"][0]["tx_errors"]
    assert obj.stats[0].rx_sec == network_fixtrue_response["stats"][0]["rx_sec"]
    assert obj.stats[0].tx_sec == network_fixtrue_response["stats"][0]["tx_sec"]
    assert obj.stats[0].ms == network_fixtrue_response["stats"][0]["ms"]
